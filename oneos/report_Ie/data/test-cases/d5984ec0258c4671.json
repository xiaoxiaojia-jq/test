{
  "uid" : "d5984ec0258c4671",
  "name" : "检查产品功能菜单",
  "fullName" : "testcase.case.test_home.Testhome_navigation#test_product_menu",
  "historyId" : "419aa7e8a4287c96af50b73e947dd2ad",
  "time" : {
    "start" : 1607495768144,
    "stop" : 1607495781864,
    "duration" : 13720
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.NoSuchElementException: Message: Unable to find element with link text == 端云融合",
  "statusTrace" : "self = <oneos.testcase.case.test_home.Testhome_navigation object at 0x0000014745437358>\nname_menu = '端云融合', result_menu = '端云融合'\n\n    @allure.story(\"导航栏\")\n    @allure.title(\"检查产品功能菜单\")\n    @allure.severity(\"normal\")\n    @pytest.mark.parametrize(\"name_menu,result_menu\", data[\"test_home_product_menu\"])\n    def test_product_menu(self,name_menu,result_menu):\n>       product_text= self.home_page.check_product_menu(name_menu)\n\ntestcase\\case\\test_home.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobject\\home.py:16: in check_product_menu\n    product_text = self.home.get_text(By.LINK_TEXT, product_name)\nutil\\util.py:117: in get_text\n    return self.find(by, locator).text\nutil\\util.py:55: in find\n    return self.dr.find_element(by, locator)\nJ:\\test.tools\\lib\\site-packages\\selenium-3.141.0-py3.7.egg\\selenium\\webdriver\\remote\\webdriver.py:978: in find_element\n    'value': value})['value']\nJ:\\test.tools\\lib\\site-packages\\selenium-3.141.0-py3.7.egg\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000014745362978>\nresponse = {'status': 404, 'value': '{\\n\\t\"value\" : \\n\\t{\\n\\t\\t\"data\" : null,\\n\\t\\t\"error\" : \"no such element\",\\n\\t\\t\"message\" : \"Unable to find element with link text == \\\\u7aef\\\\u4e91\\\\u878d\\\\u5408\",\\n\\t\\t\"stacktrace\" : \"\"\\n\\t}\\n}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to find element with link text == 端云融合\n\nJ:\\test.tools\\lib\\site-packages\\selenium-3.141.0-py3.7.egg\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchElementException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1607495752298,
      "stop" : 1607495752298,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1607496056252,
      "stop" : 1607496056252,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "story",
    "value" : "导航栏"
  }, {
    "name" : "feature",
    "value" : "首页"
  }, {
    "name" : "parentSuite",
    "value" : "testcase.case"
  }, {
    "name" : "suite",
    "value" : "test_home"
  }, {
    "name" : "subSuite",
    "value" : "Testhome_navigation"
  }, {
    "name" : "host",
    "value" : "DESKTOP-KS4SLMU"
  }, {
    "name" : "thread",
    "value" : "19596-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.case.test_home"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "name_menu",
    "value" : "'端云融合'"
  }, {
    "name" : "result_menu",
    "value" : "'端云融合'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "d5984ec0258c4671.json",
  "parameterValues" : [ "'端云融合'", "'端云融合'" ]
}